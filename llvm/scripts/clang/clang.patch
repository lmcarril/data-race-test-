Index: include/llvm/Transforms/Instrumentation.h
===================================================================
--- include/llvm/Transforms/Instrumentation.h	(revision 145532)
+++ include/llvm/Transforms/Instrumentation.h	(working copy)
@@ -34,6 +34,9 @@
 // Insert AddressSanitizer (address sanity checking) instrumentation
 ModulePass *createAddressSanitizerPass();
 
+// Insert ThreadSanitizer (data race detection) instrumentation
+ModulePass *createThreadSanitizerPass();
+
 } // End llvm namespace
 
 #endif
Index: include/llvm/InitializePasses.h
===================================================================
--- include/llvm/InitializePasses.h	(revision 145532)
+++ include/llvm/InitializePasses.h	(working copy)
@@ -97,6 +97,7 @@
 void initializePathProfilerPass(PassRegistry&);
 void initializeGCOVProfilerPass(PassRegistry&);
 void initializeAddressSanitizerPass(PassRegistry&);
+void initializeThreadSanitizerPass(PassRegistry&);
 void initializeEarlyCSEPass(PassRegistry&);
 void initializeExpandISelPseudosPass(PassRegistry&);
 void initializeFindUsedTypesPass(PassRegistry&);
Index: lib/Transforms/Instrumentation/Instrumentation.cpp
===================================================================
--- lib/Transforms/Instrumentation/Instrumentation.cpp	(revision 145532)
+++ lib/Transforms/Instrumentation/Instrumentation.cpp	(working copy)
@@ -25,6 +25,7 @@
   initializePathProfilerPass(Registry);
   initializeGCOVProfilerPass(Registry);
   initializeAddressSanitizerPass(Registry);
+  initializeThreadSanitizerPass(Registry);
 }
 
 /// LLVMInitializeInstrumentation - C binding for
Index: lib/Transforms/Instrumentation/CMakeLists.txt
===================================================================
--- lib/Transforms/Instrumentation/CMakeLists.txt	(revision 145532)
+++ lib/Transforms/Instrumentation/CMakeLists.txt	(working copy)
@@ -1,5 +1,6 @@
 add_llvm_library(LLVMInstrumentation
   AddressSanitizer.cpp
+  ThreadSanitizer.cpp
   EdgeProfiling.cpp
   GCOVProfiling.cpp
   Instrumentation.cpp
Index: tools/clang/include/clang/Basic/LangOptions.def
===================================================================
--- tools/clang/include/clang/Basic/LangOptions.def	(revision 145532)
+++ tools/clang/include/clang/Basic/LangOptions.def	(working copy)
@@ -122,6 +122,7 @@
 BENIGN_LANGOPT(ParseUnknownAnytype, 1, 0, "__unknown_anytype")
 BENIGN_LANGOPT(DebuggerSupport , 1, 0, "debugger support")
 BENIGN_LANGOPT(AddressSanitizer , 1, 0, "AddressSanitizer enabled")
+BENIGN_LANGOPT(ThreadSanitizer , 1, 0, "ThreadSanitizer enabled")
 
 BENIGN_LANGOPT(SpellChecking , 1, 1, "spell-checking")
 LANGOPT(SinglePrecisionConstants , 1, 0, "treating double-precision floating point constants as single precision constants")
Index: tools/clang/include/clang/Driver/CC1Options.td
===================================================================
--- tools/clang/include/clang/Driver/CC1Options.td	(revision 145532)
+++ tools/clang/include/clang/Driver/CC1Options.td	(working copy)
@@ -116,6 +116,8 @@
   HelpText<"The string to embed in the Dwarf debug flags record.">;
 def faddress_sanitizer: Flag<"-faddress-sanitizer">,
   HelpText<"Enable AddressSanitizer instrumentation (memory error detection)">;
+def fthread_sanitizer: Flag<"-fthread-sanitizer">,
+  HelpText<"Enable ThreadSanitizer instrumentation (data race detection)">;
 def fforbid_guard_variables : Flag<"-fforbid-guard-variables">,
   HelpText<"Emit an error if a C++ static local initializer would need a guard variable">;
 def g : Flag<"-g">, HelpText<"Generate source level debug information">;
Index: tools/clang/include/clang/Driver/Options.td
===================================================================
--- tools/clang/include/clang/Driver/Options.td	(revision 145532)
+++ tools/clang/include/clang/Driver/Options.td	(working copy)
@@ -264,6 +264,8 @@
 def fapple_pragma_pack : Flag<"-fapple-pragma-pack">, Group<f_Group>;
 def faddress_sanitizer : Flag<"-faddress-sanitizer">, Group<f_Group>;
 def fno_address_sanitizer : Flag<"-fno-address-sanitizer">, Group<f_Group>;
+def fthread_sanitizer : Flag<"-fthread-sanitizer">, Group<f_Group>;
+def fno_thread_sanitizer : Flag<"-fno-thread-sanitizer">, Group<f_Group>;
 def fasm : Flag<"-fasm">, Group<f_Group>;
 
 def fasm_blocks : Flag<"-fasm-blocks">, Group<f_Group>;
Index: tools/clang/lib/Frontend/CompilerInvocation.cpp
===================================================================
--- tools/clang/lib/Frontend/CompilerInvocation.cpp	(revision 145532)
+++ tools/clang/lib/Frontend/CompilerInvocation.cpp	(working copy)
@@ -669,6 +669,8 @@
     Res.push_back("-fcatch-undefined-behavior");
   if (Opts.AddressSanitizer)
     Res.push_back("-faddress-sanitizer");
+  if (Opts.ThreadSanitizer)
+    Res.push_back("-fthread-sanitizer");
   if (Opts.WritableStrings)
     Res.push_back("-fwritable-strings");
   if (Opts.ConstStrings)
@@ -1809,6 +1811,7 @@
   Opts.ParseUnknownAnytype = Args.hasArg(OPT_funknown_anytype);
   Opts.DebuggerSupport = Args.hasArg(OPT_fdebugger_support);
   Opts.AddressSanitizer = Args.hasArg(OPT_faddress_sanitizer);
+  Opts.ThreadSanitizer = Args.hasArg(OPT_fthread_sanitizer);
   Opts.ApplePragmaPack = Args.hasArg(OPT_fapple_pragma_pack);
   Opts.CurrentModule = Args.getLastArgValue(OPT_fmodule_name);
 
Index: tools/clang/lib/Lex/PPMacroExpansion.cpp
===================================================================
--- tools/clang/lib/Lex/PPMacroExpansion.cpp	(revision 145532)
+++ tools/clang/lib/Lex/PPMacroExpansion.cpp	(working copy)
@@ -603,6 +603,7 @@
            .Case("cxx_exceptions", LangOpts.Exceptions)
            .Case("cxx_rtti", LangOpts.RTTI)
            .Case("enumerator_attributes", true)
+           .Case("thread_sanitizer", LangOpts.ThreadSanitizer)
            // Objective-C features
            .Case("objc_arr", LangOpts.ObjCAutoRefCount) // FIXME: REMOVE?
            .Case("objc_arc", LangOpts.ObjCAutoRefCount)
Index: tools/clang/lib/Driver/Tools.cpp
===================================================================
--- tools/clang/lib/Driver/Tools.cpp	(revision 145532)
+++ tools/clang/lib/Driver/Tools.cpp	(working copy)
@@ -1121,6 +1121,45 @@
   TC.AddCXXStdlibLibArgs(Args, CmdArgs);
 }
 
+/// If ThreadSanitizer is enabled, add appropriate linker flags (Linux).
+/// This needs to be called before we add the C run-time (malloc, etc).
+static void addTsanRTLinux(const ToolChain &TC, const ArgList &Args,
+                           ArgStringList &CmdArgs) {
+  // Add TSan linker flags when linking an executable, but not a shared object.
+  if (Args.hasArg(options::OPT_shared) ||
+      !Args.hasFlag(options::OPT_fthread_sanitizer,
+                    options::OPT_fno_thread_sanitizer, false))
+    return;
+  const char *libtsan_from_env = getenv("TSAN_LIB");  // temporary
+  std::string libtsan, link_config;
+  if (libtsan_from_env) {
+    libtsan = libtsan_from_env;
+  } else {
+    libtsan = TC.getDriver().Dir + "/../lib/tsan_rtl";
+    switch(TC.getArch()) {
+      case llvm::Triple::x86:
+        libtsan += "32.a";
+        break;
+      case llvm::Triple::x86_64:
+        libtsan += "64.a";
+        break;
+      case llvm::Triple::arm:
+        libtsan += "_arm.a";
+        break;
+      default:
+        libtsan += "_arch_unsupported.a";
+    }
+  }
+  CmdArgs.push_back(Args.MakeArgString(libtsan));
+  link_config = "@" + TC.getDriver().Dir + "/../lib/link_config.txt";
+  CmdArgs.push_back(Args.MakeArgString(link_config));
+  CmdArgs.push_back("-lpthread");
+  CmdArgs.push_back("-ldl");
+  CmdArgs.push_back("-lrt");
+  CmdArgs.push_back("-export-dynamic");
+  TC.AddCXXStdlibLibArgs(Args, CmdArgs);
+}
+
 void Clang::ConstructJob(Compilation &C, const JobAction &JA,
                          const InputInfo &Output,
                          const InputInfoList &Inputs,
@@ -1736,6 +1775,9 @@
   if (Args.hasFlag(options::OPT_faddress_sanitizer,
                    options::OPT_fno_address_sanitizer, false))
     CmdArgs.push_back("-faddress-sanitizer");
+  if (Args.hasFlag(options::OPT_fthread_sanitizer,
+                   options::OPT_fno_thread_sanitizer, false))
+    CmdArgs.push_back("-fthread-sanitizer");
 
   // -flax-vector-conversions is default.
   if (!Args.hasFlag(options::OPT_flax_vector_conversions,
@@ -4491,6 +4533,7 @@
 
   // Call this before we add the C run-time.
   addAsanRTLinux(getToolChain(), Args, CmdArgs);
+  addTsanRTLinux(getToolChain(), Args, CmdArgs);
 
   if (!Args.hasArg(options::OPT_nostdlib)) {
     if (Args.hasArg(options::OPT_static))
Index: tools/clang/lib/CodeGen/CodeGenFunction.cpp
===================================================================
--- tools/clang/lib/CodeGen/CodeGenFunction.cpp	(revision 145532)
+++ tools/clang/lib/CodeGen/CodeGenFunction.cpp	(working copy)
@@ -265,7 +265,10 @@
   FnRetTy = RetTy;
   CurFn = Fn;
   CurFnInfo = &FnInfo;
+  // See http://llvm.org/bugs/show_bug.cgi?id=10657 
+#if 0
   assert(CurFn->isDeclaration() && "Function already has body?");
+#endif
 
   // Pass inline keyword to optimizer if it appears explicitly on any
   // declaration.
Index: tools/clang/lib/CodeGen/BackendUtil.cpp
===================================================================
--- tools/clang/lib/CodeGen/BackendUtil.cpp	(revision 145532)
+++ tools/clang/lib/CodeGen/BackendUtil.cpp	(working copy)
@@ -120,6 +120,11 @@
   PM.add(createAddressSanitizerPass());
 }
 
+static void addThreadSanitizerPass(const PassManagerBuilder &Builder,
+                                   PassManagerBase &PM) {
+  PM.add(createThreadSanitizerPass());
+}
+
 void EmitAssemblyHelper::CreatePasses() {
   unsigned OptLevel = CodeGenOpts.OptimizationLevel;
   CodeGenOptions::InliningMethod Inlining = CodeGenOpts.Inlining;
@@ -153,7 +158,13 @@
     PMBuilder.addExtension(PassManagerBuilder::EP_EnabledOnOptLevel0,
                            addAddressSanitizerPass);
   }
-  
+  if (LangOpts.ThreadSanitizer) {
+    PMBuilder.addExtension(PassManagerBuilder::EP_ScalarOptimizerLate,
+                           addThreadSanitizerPass);
+    PMBuilder.addExtension(PassManagerBuilder::EP_EnabledOnOptLevel0,
+                           addThreadSanitizerPass);
+  }
+
   // Figure out TargetLibraryInfo.
   Triple TargetTriple(TheModule->getTargetTriple());
   PMBuilder.LibraryInfo = new TargetLibraryInfo(TargetTriple);
