Index: hg_main.c
===================================================================
--- hg_main.c	(revision 7740)
+++ hg_main.c	(working copy)
@@ -306,6 +306,9 @@
 static UInt clo_max_segment_set_size = 20;
 
 
+static Bool clo_ss_recycle = True;
+
+
 /* This has to do with printing error messages.  See comments on
    announce_threadset() and summarise_threadset().  Perhaps it
    should be a command line option. */
@@ -1193,6 +1196,27 @@
    return words[i];
 }
 
+// increment the ref count for a non-singleton SS. 
+static inline void SS_ref(SegmentSet ss, UWord sz) {
+   tl_assert(!SS_is_singleton(ss));
+   HG_(refWS) (univ_ssets, ss, sz);
+}
+
+
+// decrement the ref count of a non-singleton SS and return 
+// the new value of ref count
+static inline UInt SS_unref(SegmentSet ss, UWord sz) {
+   tl_assert(!SS_is_singleton(ss));
+   return HG_(unrefWS) (univ_ssets, ss, sz);
+}
+
+// recycle a non-singleton SS which has refcount zero.
+static inline void SS_recycle(SegmentSet ss) {
+   tl_assert(!SS_is_singleton(ss));
+   HG_(recycleWS)(univ_ssets, ss);
+}
+
+
 static inline Bool LS_valid (LockSet ls) {
    return ls < (1 << N_LOCK_SET_BITS);
 }
@@ -1256,6 +1280,33 @@
 }
 
 
+static inline Bool is_SHVAL_valid_SLOW ( SVal sv) {
+   if (!is_SHVAL_valid(sv)) return False;
+#if 0
+   if (clo_ss_recycle && is_SHVAL_RW(sv)) {
+      SegmentSet SS = get_SHVAL_SS(sv); 
+      if (!SS_is_singleton(SS)) {
+         if (!(HG_(saneWS_SLOW(univ_ssets, SS)))) {
+            VG_(printf)("not sane: %llx %llx\n", sv, (sv >> 26) & 15);
+            return False;
+         }
+      }
+   }
+#endif   
+   return True;
+}
+
+// If sv has a non-singleton SS, increment it's refcount by 1.
+static inline void SHVAL_SS_ref(SVal sv) {
+   if (LIKELY(is_SHVAL_RW(sv))) {
+      SegmentSet ss = get_SHVAL_SS(sv);
+      if (UNLIKELY(!SS_is_singleton(ss))) {
+         SS_ref(ss, 1);
+      }
+   }
+}
+
+
 /*----------------------------------------------------------------*/
 /*--- Print out the primary data structures                    ---*/
 /*----------------------------------------------------------------*/
@@ -3457,12 +3508,13 @@
 }
 
 static __attribute__((noinline))
-SegmentSet do_SS_update_MULTI ( /*OUT*/Bool* hb_all_p, 
+SegmentSet do_SS_update_MULTI ( /*OUT*/Bool* hb_all_p,
+                                /*OUT*/Bool* oldSS_has_active_segment,
                                 Thread* thr,
                                 Bool do_trace,
                                 SegmentSet oldSS, SegmentID currS )
 {
-   // update the segment set and compute hb_all
+   // update the segment set; compute hb_all and oldSS_has_active_segment. 
    /* General case */
 
    UWord i;
@@ -3479,11 +3531,14 @@
 
    tl_assert(oldSS_size <= clo_max_segment_set_size);
 
+   *oldSS_has_active_segment = False;
+
    // fill in the arrays add_vec/del_vec and try a shortcut
    add_vec[add_size++] = currS;
    for (i = 0; i < oldSS_size; i++) {
       SegmentID S = SS_get_element(oldSS, i);
       if (currS == S) {
+         *oldSS_has_active_segment = True;
          // shortcut: 
          // currS is already contained in oldSS, so we don't need to add it. 
          // Since oldSS is a max frontier 
@@ -3498,8 +3553,13 @@
       }
       // compute happens-before
       Bool hb = False;
-      if (S == currS  // Same segment. 
-          || SEG_get(S)->thr == thr // Same thread. 
+      Thread *thr_of_S = SEG_get(S)->thr;
+
+      if (thr_of_S->csegid == S) {
+         *oldSS_has_active_segment = True;
+      }
+
+      if (thr_of_S == thr // Same thread. 
           || happens_before(S, currS)) {
              // different thread, but happens-before
          hb = True;
@@ -3571,7 +3631,46 @@
    return newSS;
 }
 
+static inline SegmentSet do_SS_update ( /*OUT*/Bool* hb_all_p, 
+                                        /*OUT*/Bool* may_recycle_oldSS_p,
+                                Thread* thr,
+                                Bool do_trace,
+                                SegmentSet oldSS, SegmentID currS,
+                                UWord sz)
+{  
+   SegmentSet newSS;
+   Bool oldSS_has_active_segment = False;
+   if (LIKELY(SS_is_singleton(oldSS))) {
+      // we don't care if oldSS contains an active segment since oldSS 
+      // is a singleton and we don't want to recycle it. 
+      newSS = do_SS_update_SINGLE( hb_all_p, thr, do_trace, oldSS, currS );
+      if (UNLIKELY(clo_ss_recycle && !SS_is_singleton(newSS))) {
+         // newSS is not singleton => newSS != oldSS. 
+         SS_ref(newSS, sz);
+         tl_assert(HG_(saneWS_SLOW)(univ_ssets, newSS));
+      }
+   } else {
+      newSS = do_SS_update_MULTI( hb_all_p, &oldSS_has_active_segment,
+                                  thr, do_trace, oldSS, currS );
+      if (clo_ss_recycle && newSS != oldSS) {
+         if (!SS_is_singleton(newSS)) {
+            SS_ref(newSS, sz);
+            tl_assert(HG_(saneWS_SLOW)(univ_ssets, newSS));
+         }
+         if (SS_unref(oldSS, sz) == 0 && !oldSS_has_active_segment) {
+            // reference count dropped to zero and oldSS does not contain 
+            // active segments. There is no way for this SS to appear again. 
+            // Tell the caller that oldSS can be recycled. 
+            *may_recycle_oldSS_p = True;
+         }
+      }
+   }
+   return newSS;
+}
 
+
+
+
 static void msm_do_trace(Thread *thr, Addr a, SVal sv_new, Bool is_w) 
 {
    HChar buf[200];
@@ -3606,7 +3705,7 @@
 SVal msm_handle_write(Thread* thr, Addr a, SVal sv_old, Int sz)
 {
    Bool       was_w;
-   SegmentSet oldSS;
+   SegmentSet oldSS = 0;
    LockSet    oldLS;
    Bool       hb_all     = False;
    Bool       is_race    = False;
@@ -3617,6 +3716,7 @@
    SegmentID  currS = thr->csegid;
    SegmentSet newSS = 0;
    LockSet    newLS = 0;
+   Bool       may_recycle_oldSS = False;
 
    // current locks. 
    LockSet    currLS = thr->locksetW;
@@ -3666,14 +3766,13 @@
    if (LIKELY(is_SHVAL_RW(sv_old))) {
       was_w = is_SHVAL_W(sv_old);
 
+      tl_assert(is_SHVAL_valid_SLOW(sv_old));
       // update the segment set and compute hb_all
       oldSS = get_SHVAL_SS(sv_old);
-      if (LIKELY(SS_is_singleton(oldSS))) {
-         newSS = do_SS_update_SINGLE( &hb_all, thr, do_trace, oldSS, currS );
-      } else {
-         newSS = do_SS_update_MULTI( &hb_all, thr, do_trace, oldSS, currS );
-      }
+      newSS = do_SS_update(&hb_all, &may_recycle_oldSS, 
+                           thr, do_trace, oldSS, currS, sz);
 
+
       // update lock set. 
       if (hb_all) {
          newLS = currLS;
@@ -3724,10 +3823,19 @@
       record_error_Race( thr, 
                          a, True, sz, sv_old, sv_new,
                          maybe_get_lastlock_initpoint(a) );
+      // never recycle segment sets in sv_old/sv_new
+      SHVAL_SS_ref(sv_old);
+      SHVAL_SS_ref(sv_new);
+      may_recycle_oldSS = False;
       // put this in Race state
       sv_new = SHVAL_Race;
    }
 
+   if (may_recycle_oldSS) {
+      SS_recycle(oldSS);
+   }
+
+
    return sv_new; 
 }
 
@@ -3736,7 +3844,7 @@
 SVal msm_handle_read(Thread* thr, Addr a, SVal sv_old, Int sz)
 {
    Bool       was_w, now_w;
-   SegmentSet oldSS;
+   SegmentSet oldSS = 0;
    LockSet    oldLS;
    Bool       hb_all     = False;
    Bool       is_race    = False;
@@ -3747,6 +3855,7 @@
    SegmentID  currS = thr->csegid;
    SegmentSet newSS = 0;
    LockSet    newLS = 0;
+   Bool       may_recycle_oldSS = False;
 
    // current locks. 
    LockSet    currLS = thr->locksetA;
@@ -3801,14 +3910,13 @@
    if (LIKELY(is_SHVAL_RW(sv_old))) {
       was_w = is_SHVAL_W(sv_old);
 
+      tl_assert(is_SHVAL_valid_SLOW(sv_old));
       // update the segment set and compute hb_all
       oldSS = get_SHVAL_SS(sv_old);
-      if (LIKELY(SS_is_singleton(oldSS))) {
-         newSS = do_SS_update_SINGLE( &hb_all, thr, do_trace, oldSS, currS );
-      } else {
-         newSS = do_SS_update_MULTI( &hb_all, thr, do_trace, oldSS, currS );
-      }
+      newSS = do_SS_update( &hb_all, &may_recycle_oldSS, 
+                            thr, do_trace, oldSS, currS, sz);
 
+
       // update lock set. 
       if (hb_all) {
          newLS = currLS;
@@ -3864,10 +3972,18 @@
       record_error_Race( thr, 
                          a, False, sz, sv_old, sv_new,
                          maybe_get_lastlock_initpoint(a) );
+      // never recycle segment sets in sv_old/sv_new
+      SHVAL_SS_ref(sv_old);
+      SHVAL_SS_ref(sv_new);
+      may_recycle_oldSS = False;
       // put this in Race state
       sv_new = SHVAL_Race;
    }
 
+   if (may_recycle_oldSS) {
+      SS_recycle(oldSS);
+   }
+
    return sv_new; 
 }
 
@@ -9494,6 +9610,11 @@
          clo_max_segment_set_size = 4;
    }
 
+   else if (VG_CLO_STREQ(arg, "--ss-recycle=yes"))
+      clo_ss_recycle = True;
+   else if (VG_CLO_STREQ(arg, "--ss-recycle=no"))
+      clo_ss_recycle = False;
+
    else if (VG_CLO_STREQ(arg, "--gen-vcg=no"))
       clo_gen_vcg = 0;
    else if (VG_CLO_STREQ(arg, "--gen-vcg=yes"))
Index: hg_wordset.c
===================================================================
--- hg_wordset.c	(revision 7740)
+++ hg_wordset.c	(working copy)
@@ -75,6 +75,11 @@
       (_zzcache).inUse = 0;                                          \
    } while (0)
 
+#define WCache_INVAL(_zzcache)                                       \
+   do {                                                              \
+      (_zzcache).inUse = 0;                                          \
+   } while (0)
+
 #define WCache_LOOKUP_AND_RETURN(_retty,_zzcache,_zzarg1,_zzarg2)    \
    do {                                                              \
       UWord   _i;                                                    \
@@ -132,9 +137,12 @@
       WordSetU* owner; /* for sanity checking */
       UWord*    words;
       UWord     size; /* Really this should be SizeT */
+      UWord     refcount; 
    }
    WordVec;
 
+#define N_RECYCLE_CACHE_MAX 32
+
 /* ix2vec[0 .. ix2vec_used-1] are pointers to the lock sets (WordVecs)
    really.  vec2ix is the inverse mapping, mapping WordVec* to the
    corresponding ix2vec entry number.  The two mappings are mutually
@@ -152,6 +160,9 @@
       WCache    cache_delFrom;
       WCache    cache_intersect;
       WCache    cache_minus;
+      /* recycle cache */
+      UWord     recycle_cache[N_RECYCLE_CACHE_MAX];
+      UInt      recycle_cache_n;
       /* Stats */
       UWord     n_add;
       UWord     n_add_uncached;
@@ -170,6 +181,7 @@
       UWord     n_anyElementOf;
       UWord     n_elementOf;
       UWord     n_isSubsetOf;
+      UWord     n_recycle;
    };
 
 /* Create a new WordVec of the given size.  The WordVec and the array
@@ -189,6 +201,7 @@
    wv->owner = wsu;
    wv->words = NULL;
    wv->size = sz;
+   wv->refcount = 0;
    if (sz > 0) {
       wv->words = (UWord*)(allocated_mem + sizeof(WordVec));
       tl_assert(0 == (UWord)(wv->words) % sizeof(UWord));
@@ -460,6 +473,84 @@
    *words  = wv->words;
 }
 
+
+// Increment the refcount of ws by sz. 
+void    HG_(refWS)          ( WordSetU *wsu, WordSet ws, UWord sz)
+{
+   WordVec* wv;
+   tl_assert(wsu);
+   wv = do_ix2vec( wsu, ws );
+   tl_assert(wv->size >= 0);
+   wv->refcount += sz;
+}
+
+// Decrement the refcount of ws by sz and return the new refcount value.
+UWord    HG_(unrefWS)        ( WordSetU *wsu, WordSet ws, UWord sz)
+{
+   WordVec* wv;
+   tl_assert(wsu);
+   wv = do_ix2vec( wsu, ws );
+   tl_assert(wv->size >= 0);
+   tl_assert(wv->refcount >= sz);
+   wv->refcount -= sz;
+   return wv->refcount;
+}
+
+// Get the current refcount of ws.
+UWord    HG_(getRefWS)        ( WordSetU *wsu, WordSet ws)
+{
+   WordVec* wv;
+   tl_assert(wsu);
+   wv = do_ix2vec( wsu, ws );
+   tl_assert(wv->size >= 0);
+   return wv->refcount;
+}
+
+
+/*
+   WordSet Recycling. 
+   Once HG_(recycleWS) is called on a ws, 
+   the memory allocated for ws is freed and ws is removed from vec2ix. 
+   The slot wsu->ix2vec[ws] is assigned NULL and remains NULL forever. 
+   We also have to flush cashes (otherwise if the user creates a new set 
+   equal to the recycled one, cache may return the index of the recycled ws). 
+
+   We maintain a cache os WordSets to recycle and do recycling 
+   every N_RECYCLE_CACHE_MAX call to HG_(recycleWS). 
+   This is done to minimize the number of addTo/delFrom/etc cache invals.
+
+   Possible improvement to this scheme: 
+   - Do not call deleteWV, instead maintain our own free list (?). 
+   - Recycle the slot wsu->ix2vec[ws] (will complicate sanity checking). 
+*/
+void    HG_(recycleWS)      ( WordSetU *wsu, WordSet ws) 
+{
+   tl_assert(wsu);
+
+   if (wsu->recycle_cache_n == N_RECYCLE_CACHE_MAX) {
+      // cache is full, do the recycling
+      UInt i;
+      for (i = 0; i < wsu->recycle_cache_n; i++) {
+         WordSet ws_to_recycle = wsu->recycle_cache[i];
+         WordVec *wv = do_ix2vec( wsu, ws_to_recycle );
+         tl_assert(wv->size >= 0);
+         tl_assert(wv->refcount == 0);
+         HG_(delFromFM)(wsu->vec2ix, NULL, NULL, (Word)wv);
+         delete_WV(wv);
+         wsu->ix2vec[ws_to_recycle] = NULL; 
+         wsu->n_recycle++;
+      }
+      WCache_INVAL(wsu->cache_addTo);
+      WCache_INVAL(wsu->cache_delFrom);
+      WCache_INVAL(wsu->cache_intersect);
+      WCache_INVAL(wsu->cache_minus);
+      wsu->recycle_cache_n = 0;
+   }
+   tl_assert(wsu->recycle_cache_n < N_RECYCLE_CACHE_MAX);
+   wsu->recycle_cache[wsu->recycle_cache_n++] = ws;
+}
+
+
 Bool HG_(plausibleWS) ( WordSetU* wsu, WordSet ws )
 {
    if (wsu == NULL) return False;
@@ -475,9 +566,18 @@
    if (wsu == NULL) return False;
    if (ws < 0 || ws >= wsu->ix2vec_used)
       return False;
-   wv = do_ix2vec( wsu, ws );
-   /* can never happen .. do_ix2vec will assert instead.  Oh well. */
-   if (wv->owner != wsu) return False;
+   if (wsu->ix2vec_used > wsu->ix2vec_size) 
+      return False;
+   if (wsu->ix2vec_used > 0)
+      if (!wsu->ix2vec)
+         return False;
+   if ((ws >= wsu->ix2vec_used))
+      return False;
+   wv = wsu->ix2vec[ws];
+   if (!wv) 
+      return False;
+   if (wv->owner != wsu) 
+      return False;
    if (wv->size < 0) return False;
    if (wv->size > 0) {
       for (i = 0; i < wv->size-1; i++) {
@@ -564,22 +664,25 @@
                wsu->n_add, wsu->n_add_uncached);
    VG_(printf)("      delFrom      %,10u (%,u uncached)\n", 
                wsu->n_del, wsu->n_del_uncached);
-   VG_(printf)("      union        %10u\n", wsu->n_union);
-   VG_(printf)("      intersect    %10u (%u uncached) [nb. incl isSubsetOf]\n", 
+   VG_(printf)("      union        %,10u\n", wsu->n_union);
+   VG_(printf)("      intersect    %,10u (%u uncached) [nb. incl isSubsetOf]\n", 
                wsu->n_intersect, wsu->n_intersect_uncached);
-   VG_(printf)("      minus        %10u (%u uncached)\n",
+   VG_(printf)("      minus        %,10u (%u uncached)\n",
                wsu->n_minus, wsu->n_minus_uncached);
-   VG_(printf)("      elem         %10u\n",   wsu->n_elem);
-   VG_(printf)("      doubleton    %10u\n",   wsu->n_doubleton);
-   VG_(printf)("      isEmpty      %10u\n",   wsu->n_isEmpty);
-   VG_(printf)("      isSingleton  %10u\n",   wsu->n_isSingleton);
-   VG_(printf)("      isSorEmpty   %10u\n",   wsu->n_isSorE);
-   VG_(printf)("      anyElementOf %10u\n",   wsu->n_anyElementOf);
-   VG_(printf)("      elementOf    %10u\n",   wsu->n_elementOf);
-   VG_(printf)("      isSubsetOf   %10u\n",   wsu->n_isSubsetOf);
+   VG_(printf)("      elem         %,10u\n",   wsu->n_elem);
+   VG_(printf)("      doubleton    %,10u\n",   wsu->n_doubleton);
+   VG_(printf)("      isEmpty      %,10u\n",   wsu->n_isEmpty);
+   VG_(printf)("      isSingleton  %,10u\n",   wsu->n_isSingleton);
+   VG_(printf)("      isSorEmpty   %,10u\n",   wsu->n_isSorE);
+   VG_(printf)("      anyElementOf %,10u\n",   wsu->n_anyElementOf);
+   VG_(printf)("      elementOf    %,10u\n",   wsu->n_elementOf);
+   VG_(printf)("      isSubsetOf   %,10u\n",   wsu->n_isSubsetOf);
+   VG_(printf)("      cardinality  %,10u\n",   (int)HG_(cardinalityWSU)(wsu));
+   VG_(printf)("      recycle      %,10u\n",   wsu->n_recycle);
 
    // compute and print size distributions 
    for (i = 0; i < (Int)HG_(cardinalityWSU)(wsu); i++) {
+      if (!HG_(saneWS_SLOW(wsu, i))) continue;
       WordVec *wv = do_ix2vec( wsu, i );
       Int size = wv->size;
       if (size >= d_size) size = d_size-1;
Index: hg_wordset.h
===================================================================
--- hg_wordset.h	(revision 7740)
+++ hg_wordset.h	(working copy)
@@ -83,7 +83,13 @@
 
 Bool    HG_(plausibleWS)    ( WordSetU*, WordSet );
 Bool    HG_(saneWS_SLOW)    ( WordSetU*, WordSet );
+void    HG_(refWS)          ( WordSetU*, WordSet, UWord );
+UWord   HG_(unrefWS)        ( WordSetU*, WordSet, UWord );
+UWord   HG_(getRefWS)       ( WordSetU*, WordSet );
+void    HG_(recycleWS)      ( WordSetU*, WordSet );
 
+
+
 void    HG_(ppWS)           ( WordSetU*, WordSet );
 void    HG_(getPayloadWS)   ( /*OUT*/UWord** words, /*OUT*/UWord* nWords, 
                              WordSetU*, WordSet );
